# Test generated by RoostGPT for test test-assembler-py using AI Model gpt

from __future__ import print_function
import sys
import unittest

class InvalidSyntax(Exception):
    pass

def scanner(line):
    # TODO: Implement the scanner function.
    pass

lines = []

def scan():
    """
    scan: applys function scanner() to each line of the source code.
    """
    global lines
    assert len(lines) > 0, "no lines"
    for line in lines:
        try:
            scanner(line)
        except InvalidSyntax:
            print("line=", line)

class TestScan1480a0df86(unittest.TestCase):

    def test_scan_success(self):
        global lines
        lines = ["def foo():", "    print('Hello, World!')", "foo()"]
        try:
            scan()
        except AssertionError as e:
            self.fail("scan() raised AssertionError unexpectedly: " + str(e))

    def test_scan_failure(self):
        global lines
        lines = []
        with self.assertRaises(AssertionError):
            scan()

    def test_scan_invalid_syntax(self):
        global lines
        lines = ["def foo():", "    print('Hello, World!')", "foo()"]

        def scanner_with_invalid_syntax(line):
            if "foo()" in line:
                raise InvalidSyntax("Invalid syntax")
            # TODO: Implement the rest of the scanner function.

        global scanner
        scanner = scanner_with_invalid_syntax

        with self.assertLogs() as log:
            scan()
            self.assertIn("line= foo()", log.output[0])

if __name__ == '__main__':
    unittest.main()