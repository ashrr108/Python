# Test generated by RoostGPT for test test-assembler-py using AI Model gpt

from __future__ import print_function
import sys
import unittest

class InvalidSyntax(Exception):
    pass

class Token:
    def __init__(self, value, token_type):
        self.value = value
        self.token_type = token_type

tokens = []

def scanner(string):
    # ...
    # (The provided scanner function should be here)
    # ...

class TestScanner8565c7a607(unittest.TestCase):

    def test_valid_input(self):
        global tokens
        tokens = []
        input_str = 'mov eax, 1\nadd eax, 2\nsub eax, 3\nint 0x80'
        expected_tokens = [
            Token('mov', 'command'), Token('eax', 'register'), Token('1', 'value'),
            Token('add', 'command'), Token('eax', 'register'), Token('2', 'value'),
            Token('sub', 'command'), Token('eax', 'register'), Token('3', 'value'),
            Token('int', 'command'), Token('0x80', 'value')
        ]

        scanner(input_str)

        self.assertEqual(len(tokens), len(expected_tokens))
        for i in range(len(tokens)):
            self.assertEqual(tokens[i].value, expected_tokens[i].value)
            self.assertEqual(tokens[i].token_type, expected_tokens[i].token_type)

    def test_invalid_input(self):
        input_str = 'movz eax, 1'

        with self.assertRaises(InvalidSyntax):
            scanner(input_str)

if __name__ == '__main__':